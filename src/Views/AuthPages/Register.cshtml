@model RegisterInputModel
@{
    ViewData["Title"] = "Register an Account";
    Layout = "_AuthLayout";
}

<h2 class="page-title">Register an Account</h2>

<form method="post" asp-action="Register">
    <div class="form-group">
        <label asp-for="Email">Email Address</label>
        <input asp-for="Email" type="email" class="form-control" placeholder="Enter your email" autocomplete="email" />
        <span asp-validation-for="Email" class="field-validation-error"></span>
    </div>

    <div class="form-group">
        <label asp-for="Password">Password</label>
        <input asp-for="Password" type="password" class="form-control" placeholder="Create a password (minimum 6 characters)" autocomplete="new-password" />
        <span asp-validation-for="Password" class="field-validation-error"></span>
        <small class="form-text">Password must be at least 6 characters long</small>
    </div>

    <div class="form-group">
        <label asp-for="ConfirmPassword">Confirm Password</label>
        <input asp-for="ConfirmPassword" type="password" class="form-control" placeholder="Confirm your password" autocomplete="new-password" />
        <span asp-validation-for="ConfirmPassword" class="field-validation-error"></span>
    </div>

    <button type="submit" class="btn btn-primary">Create Account</button>
</form>

<div class="auth-links">
    <span>Already have an account?</span>
    <a asp-action="Login" class="auth-link">Sign in here</a>
</div>

<style>
    .form-text {
        font-size: 0.75rem;
        color: var(--text-secondary);
        margin-top: var(--spacing-xs);
        display: block;
    }

    .checkbox-container {
        display: flex;
        align-items: flex-start;
        cursor: pointer;
        font-size: 0.875rem;
        margin-bottom: var(--spacing-sm);
        line-height: 1.4;
    }

    .checkbox-container input[type="checkbox"] {
        margin-right: var(--spacing-xs);
        margin-top: 2px;
        transform: scale(1.1);
        flex-shrink: 0;
    }

    .checkbox-container input[type="checkbox"]:focus {
        outline: 2px solid var(--brand-primary);
        outline-offset: 2px;
    }

    .password-mismatch {
        border-color: #dc3545 !important;
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const password = document.querySelector('input[name="Password"]');
    const confirmPassword = document.querySelector('input[name="ConfirmPassword"]');
    const form = document.querySelector('form');
    
    function validatePasswords() {
        const passwordValue = password.value;
        const confirmPasswordValue = confirmPassword.value;
        
        // Only validate if both fields have values
        if (passwordValue && confirmPasswordValue) {
            if (passwordValue !== confirmPasswordValue) {
                confirmPassword.classList.add('password-mismatch');
                confirmPassword.setCustomValidity('Passwords do not match');
                return false;
            } else {
                confirmPassword.classList.remove('password-mismatch');
                confirmPassword.setCustomValidity('');
                return true;
            }
        } else {
            confirmPassword.classList.remove('password-mismatch');
            confirmPassword.setCustomValidity('');
            return true; // Allow empty fields (server will validate required)
        }
    }
    
    // Validate on input
    confirmPassword.addEventListener('input', validatePasswords);
    password.addEventListener('input', validatePasswords);
    
    // Validate on form submit
    form.addEventListener('submit', function(e) {
        if (!validatePasswords()) {
            e.preventDefault();
            return false;
        }
    });
});
</script>