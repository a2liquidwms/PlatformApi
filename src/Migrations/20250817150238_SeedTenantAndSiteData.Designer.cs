// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PlatformApi.Data;

#nullable disable

namespace PlatformApi.Migrations
{
    [DbContext(typeof(PlatformDbContext))]
    [Migration("20250817150238_SeedTenantAndSiteData")]
    partial class SeedTenantAndSiteData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_identity_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("asp_identity_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_identity_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_identity_role_claims_role_id");

                    b.ToTable("asp_identity_role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_user_id");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_user_id");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_identity_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_identity_user_roles_role_id");

                    b.ToTable("asp_identity_user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("PlatformApi.Models.AuthUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("PlatformApi.Models.Permission", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("create_by");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("description");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_mod_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_mod_date");

                    b.Property<string>("ModifiedSource")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("modify_source");

                    b.Property<int?>("RoleScope")
                        .HasColumnType("integer")
                        .HasColumnName("role_scope");

                    b.HasKey("Code")
                        .HasName("pk_permissions");

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Code = "default:all",
                            CreateDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Default Basic Access Permission",
                            RoleScope = 8
                        },
                        new
                        {
                            Code = "systemadmin.manage.permissions",
                            CreateDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "SysAdmin Manage Permissions",
                            RoleScope = 1
                        },
                        new
                        {
                            Code = "systemadmin.manage.users",
                            CreateDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "SysAdmin Manage Users",
                            RoleScope = 1
                        },
                        new
                        {
                            Code = "systemadmin.manage.tenants",
                            CreateDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "SysAdmin Manage Tenants",
                            RoleScope = 1
                        },
                        new
                        {
                            Code = "tenant.admin.manage.users",
                            CreateDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Tenant Manage Users",
                            RoleScope = 2
                        },
                        new
                        {
                            Code = "tenant.manage.config",
                            CreateDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Tenant Manage Config",
                            RoleScope = 2
                        },
                        new
                        {
                            Code = "site.manage.config",
                            CreateDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Site Manage Config",
                            RoleScope = 4
                        },
                        new
                        {
                            Code = "site.manage.users",
                            CreateDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Site Manage Users",
                            RoleScope = 4
                        });
                });

            modelBuilder.Entity("PlatformApi.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("create_by");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_revoked");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_mod_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_mod_date");

                    b.Property<string>("ModifiedSource")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("modify_source");

                    b.Property<Guid?>("SiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_refresh_tokens");

                    b.HasIndex("SiteId")
                        .HasDatabaseName("ix_user_refresh_tokens_site_id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_user_refresh_tokens_tenant_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_refresh_tokens_user_id");

                    b.ToTable("user_refresh_tokens", (string)null);
                });

            modelBuilder.Entity("PlatformApi.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("create_by");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("description");

                    b.Property<bool>("IsSystemRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_system_role");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_mod_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_mod_date");

                    b.Property<string>("ModifiedSource")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("modify_source");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<int>("Scope")
                        .HasColumnType("integer")
                        .HasColumnName("scope");

                    b.Property<Guid?>("SiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("Scope")
                        .HasDatabaseName("ix_roles_scope");

                    b.HasIndex("SiteId")
                        .HasDatabaseName("ix_roles_site_id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_roles_tenant_id");

                    b.HasIndex("TenantId", "Scope")
                        .HasDatabaseName("ix_roles_tenant_id_scope");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("08dd1343-9ab2-4439-8295-da20d3e49321"),
                            CreateDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsSystemRole = false,
                            Name = "SuperAdmin",
                            Scope = 1
                        },
                        new
                        {
                            Id = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            CreateDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsSystemRole = false,
                            Name = "DefaultUser",
                            Scope = 8
                        },
                        new
                        {
                            Id = new Guid("87ad21c9-d406-4f00-90dd-d8d9ee99805b"),
                            CreateDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsSystemRole = false,
                            Name = "TenantAdmin",
                            Scope = 2
                        },
                        new
                        {
                            Id = new Guid("cc84f8ff-2699-4c69-b9a4-172076528322"),
                            CreateDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsSystemRole = false,
                            Name = "SiteAdmin",
                            Scope = 4
                        });
                });

            modelBuilder.Entity("PlatformApi.Models.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("create_by");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_mod_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_mod_date");

                    b.Property<string>("ModifiedSource")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("modify_source");

                    b.Property<string>("PermissionCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("permission_code");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_permissions");

                    b.HasIndex("PermissionCode")
                        .HasDatabaseName("ix_role_permissions_permission_code");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_permissions_role_id");

                    b.ToTable("role_permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            CreateDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionCode = "default:all",
                            RoleId = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479")
                        },
                        new
                        {
                            Id = new Guid("c08a610d-f07d-436e-839e-31f5b6ffc87d"),
                            CreateDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionCode = "systemadmin.manage.permissions",
                            RoleId = new Guid("08dd1343-9ab2-4439-8295-da20d3e49321")
                        },
                        new
                        {
                            Id = new Guid("7ee43803-5d35-425f-8392-f4de1df37e05"),
                            CreateDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionCode = "systemadmin.manage.users",
                            RoleId = new Guid("08dd1343-9ab2-4439-8295-da20d3e49321")
                        },
                        new
                        {
                            Id = new Guid("311a22a5-1100-4917-83e6-6bf7994493dd"),
                            CreateDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionCode = "systemadmin.manage.tenants",
                            RoleId = new Guid("08dd1343-9ab2-4439-8295-da20d3e49321")
                        },
                        new
                        {
                            Id = new Guid("70a47010-46a0-4a87-9f0e-b0326316e580"),
                            CreateDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionCode = "tenant.admin.manage.users",
                            RoleId = new Guid("87ad21c9-d406-4f00-90dd-d8d9ee99805b")
                        },
                        new
                        {
                            Id = new Guid("1237a8e7-96cc-47d4-a2f3-9d66fe3e3f6d"),
                            CreateDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionCode = "tenant.admin.manage.users",
                            RoleId = new Guid("87ad21c9-d406-4f00-90dd-d8d9ee99805b")
                        },
                        new
                        {
                            Id = new Guid("936456cc-8ce2-4bd5-9ba4-1b79d271fe01"),
                            CreateDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionCode = "site.manage.config",
                            RoleId = new Guid("cc84f8ff-2699-4c69-b9a4-172076528322")
                        },
                        new
                        {
                            Id = new Guid("d22bec2f-9a68-4ecf-aa81-c550f57acaa9"),
                            CreateDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            PermissionCode = "site.manage.users",
                            RoleId = new Guid("cc84f8ff-2699-4c69-b9a4-172076528322")
                        });
                });

            modelBuilder.Entity("PlatformApi.Models.Site", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("create_by");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_mod_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_mod_date");

                    b.Property<string>("ModifiedSource")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("modify_source");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_sites");

                    b.HasIndex(new[] { "Code", "TenantId" }, "IX_site_code_tenant_unique")
                        .IsUnique()
                        .HasDatabaseName("ix_sites_code_tenant_id");

                    b.HasIndex(new[] { "Name", "TenantId" }, "IX_site_name_tenant_unique")
                        .IsUnique()
                        .HasDatabaseName("ix_sites_name_tenant_id");

                    b.HasIndex(new[] { "TenantId" }, "IX_site_tenant_id")
                        .HasDatabaseName("ix_sites_tenant_id");

                    b.ToTable("sites", (string)null);
                });

            modelBuilder.Entity("PlatformApi.Models.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("create_by");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_mod_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_mod_date");

                    b.Property<string>("ModifiedSource")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("modify_source");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("SubDomain")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sub_domain");

                    b.HasKey("Id")
                        .HasName("pk_tenants");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_tenants_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_tenants_name");

                    b.HasIndex("SubDomain")
                        .IsUnique()
                        .HasDatabaseName("ix_tenants_sub_domain");

                    b.ToTable("tenants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("baab4de5-fe68-4940-996e-5914f8234863"),
                            Code = "Default",
                            CreateDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Test Tenant",
                            SubDomain = "default"
                        });
                });

            modelBuilder.Entity("PlatformApi.Models.TenantConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("LogoPath")
                        .HasColumnType("text")
                        .HasColumnName("logo_path");

                    b.Property<string>("PrimaryColor")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("primary_color");

                    b.Property<string>("SiteName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("site_name");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_tenant_configs");

                    b.HasIndex("TenantId")
                        .IsUnique()
                        .HasDatabaseName("ix_tenant_configs_tenant_id");

                    b.ToTable("tenant_configs", (string)null);
                });

            modelBuilder.Entity("PlatformApi.Models.UserInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("create_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("InvitationToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("invitation_token");

                    b.Property<string>("InvitedRoles")
                        .HasColumnType("json")
                        .HasColumnName("invited_roles");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_used");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_mod_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_mod_date");

                    b.Property<string>("ModifiedSource")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("modify_source");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_user_invitations");

                    b.HasIndex("Email")
                        .HasDatabaseName("ix_user_invitations_email");

                    b.HasIndex("InvitationToken")
                        .IsUnique()
                        .HasDatabaseName("ix_user_invitations_invitation_token");

                    b.ToTable("user_invitations", (string)null);
                });

            modelBuilder.Entity("PlatformApi.Models.UserRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("create_by");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_mod_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_mod_date");

                    b.Property<string>("ModifiedSource")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("modify_source");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<int>("Scope")
                        .HasColumnType("integer")
                        .HasColumnName("scope");

                    b.Property<Guid?>("SiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.HasIndex("SiteId")
                        .HasDatabaseName("ix_user_roles_site_id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_user_roles_tenant_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_roles_user_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("PlatformApi.Models.UserSite", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("create_by");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_mod_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_mod_date");

                    b.Property<string>("ModifiedSource")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("modify_source");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("UserId", "SiteId")
                        .HasName("pk_user_site");

                    b.HasIndex(new[] { "SiteId" }, "IX_user_site_site_id")
                        .HasDatabaseName("ix_user_site_site_id");

                    b.HasIndex(new[] { "TenantId" }, "IX_user_site_tenant_id")
                        .HasDatabaseName("ix_user_site_tenant_id");

                    b.HasIndex(new[] { "UserId" }, "IX_user_site_user_id")
                        .HasDatabaseName("ix_user_site_user_id");

                    b.ToTable("user_site", (string)null);
                });

            modelBuilder.Entity("PlatformApi.Models.UserTenant", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("create_by");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_mod_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_mod_date");

                    b.Property<string>("ModifiedSource")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("modify_source");

                    b.HasKey("UserId", "TenantId")
                        .HasName("pk_user_tenants");

                    b.HasIndex(new[] { "TenantId" }, "IX_user_tenant_tenant_id")
                        .HasDatabaseName("ix_user_tenants_tenant_id");

                    b.HasIndex(new[] { "UserId" }, "IX_user_tenant_user_id")
                        .HasDatabaseName("ix_user_tenants_user_id");

                    b.ToTable("user_tenants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_identity_role_claims_asp_identity_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PlatformApi.Models.AuthUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claims_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PlatformApi.Models.AuthUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_identity_user_roles_asp_identity_roles_role_id");

                    b.HasOne("PlatformApi.Models.AuthUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_identity_user_roles_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PlatformApi.Models.AuthUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tokens_users_user_id");
                });

            modelBuilder.Entity("PlatformApi.Models.RefreshToken", b =>
                {
                    b.HasOne("PlatformApi.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .HasConstraintName("fk_user_refresh_tokens_sites_site_id");

                    b.HasOne("PlatformApi.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .HasConstraintName("fk_user_refresh_tokens_tenants_tenant_id");

                    b.HasOne("PlatformApi.Models.AuthUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_refresh_tokens_users_user_id");

                    b.Navigation("Site");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlatformApi.Models.RolePermission", b =>
                {
                    b.HasOne("PlatformApi.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_code");

                    b.HasOne("PlatformApi.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_id");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PlatformApi.Models.Site", b =>
                {
                    b.HasOne("PlatformApi.Models.Tenant", "Tenant")
                        .WithMany("Sites")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sites_tenants_tenant_id");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("PlatformApi.Models.TenantConfig", b =>
                {
                    b.HasOne("PlatformApi.Models.Tenant", "Tenant")
                        .WithOne("TenantConfig")
                        .HasForeignKey("PlatformApi.Models.TenantConfig", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tenant_configs_tenants_tenant_id");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("PlatformApi.Models.UserRoles", b =>
                {
                    b.HasOne("PlatformApi.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("PlatformApi.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .HasConstraintName("fk_user_roles_sites_site_id");

                    b.HasOne("PlatformApi.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .HasConstraintName("fk_user_roles_tenants_tenant_id");

                    b.HasOne("PlatformApi.Models.AuthUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("Site");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlatformApi.Models.UserSite", b =>
                {
                    b.HasOne("PlatformApi.Models.Site", "Site")
                        .WithMany("UserSites")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_site_sites_site_id");

                    b.HasOne("PlatformApi.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_site_tenants_tenant_id");

                    b.HasOne("PlatformApi.Models.AuthUser", "User")
                        .WithMany("UserSites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_site_users_user_id");

                    b.Navigation("Site");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlatformApi.Models.UserTenant", b =>
                {
                    b.HasOne("PlatformApi.Models.Tenant", "Tenant")
                        .WithMany("UserTenants")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tenants_tenants_tenant_id");

                    b.HasOne("PlatformApi.Models.AuthUser", "User")
                        .WithMany("UserTenants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tenants_users_user_id");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlatformApi.Models.AuthUser", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserRoles");

                    b.Navigation("UserSites");

                    b.Navigation("UserTenants");
                });

            modelBuilder.Entity("PlatformApi.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("PlatformApi.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("PlatformApi.Models.Site", b =>
                {
                    b.Navigation("UserSites");
                });

            modelBuilder.Entity("PlatformApi.Models.Tenant", b =>
                {
                    b.Navigation("Sites");

                    b.Navigation("TenantConfig");

                    b.Navigation("UserTenants");
                });
#pragma warning restore 612, 618
        }
    }
}
